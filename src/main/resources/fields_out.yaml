openapi: 3.0.3
info:
  title: Fields_Library_out
  description: External end points
  version: 1.0.0

paths:
  /login:
    post:
      tags:
        - "Login"
      summary: login post
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwtRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    #GET REQUEST
    get:
      summary: Users get request
      tags:
        - "Users"
      description: find all Users with/without param
      operationId: findAllUsers
      parameters:
        - name: userName
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'
    #Post request
    post:
      summary: Users post request
      tags:
        - "Users"
      description: create a User
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    #GET REQUEST
    get:
      summary: User by id get request
      tags:
        - "User"
      description: find User by id
      operationId: findUserById
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'
    #PUT REQUEST
    put:
      summary: update User
      tags:
        - "User"
      description: update User
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        200:
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'
    #DELETE REQUEST
    delete:
      summary: delete User
      tags:
        - "User"
      description: delete User
      operationId: deleteUser
      responses:
        200:
          description: User deleted
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'

  /fields:
    #GET REQUEST
    get:
      summary: Fields get request
      tags:
        - "Fields"
      description: find all Fields with/without param
      operationId: findAllFields
      parameters:
        - name: hydrocarbons
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/HCtype'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldDto'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'
    #Post request
    post:
      summary: Fields post request
      tags:
        - "Fields"
      description: create a Field
      operationId: createField
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldDto'
      responses:
        201:
          description: Field created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldDto'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'
  /fields/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    #GET REQUEST
    get:
      summary: Field by id get request
      tags:
        - "Fields"
      description: find Field by id
      operationId: findFieldById
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldDto'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'
    #PUT REQUEST
    put:
      summary: update Field
      tags:
        - "Fields"
      description: update Field
      operationId: updateField
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldDto'
      responses:
        200:
          description: Field updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldDto'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'
    #DELETE REQUEST
    delete:
      summary: delete Field
      tags:
        - "Fields"
      description: delete Field
      operationId: deleteField
      responses:
        200:
          description: Field deleted
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'

  /productionentries:
    #POST REQUEST
    post:
      summary: Add daily production
      tags:
        - "Production_Entry"
      description: Add daily production
      operationId: addProduction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductionEntryDto'
      responses:
        200:
          description: Production Entry Added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyReportDto'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'

  /companies:
    #GET REQUEST
    get:
      summary: Companies get request
      tags:
        - "Companies"
      description: find all Companies with/without param
      operationId: findAllCompanies
      parameters:
        - name: companyName
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompanyDto'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'
    #Post request
    post:
      summary: Companies post request
      tags:
        - "Companies"
      description: create a company
      operationId: createCompany
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyDto'
      responses:
        201:
          description: Company created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDto'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'
  /companies/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    #GET REQUEST
    get:
      summary: Company by id get request
      tags:
        - "Companies"
      description: find project by id
      operationId: findCompanyById
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDto'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'
    #PUT REQUEST
    put:
      summary: update company
      tags:
        - "Companies"
      description: update company
      operationId: updateCompany
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyDto'
      responses:
        200:
          description: Company updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDto'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'
    #DELETE REQUEST
    delete:
      summary: delete company
      tags:
        - "Companies"
      description: delete company
      operationId: deleteCompany
      responses:
        200:
          description: Company deleted
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'

  /concessions:
    #GET REQUEST
    get:
      summary: Concessions get request
      tags:
        - "Concessions"
      description: find all Concessions with/without params
      operationId: findAllConcessions
      parameters:
        - name: companyName
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConcessionDto'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'
    #Post request
    post:
      summary: Concessions post request
      tags:
        - "Concessions"
      description: create a concessions
      operationId: createConcession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConcessionDto'
      responses:
        201:
          description: Concession created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcessionDto'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'
  /concessions/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    #GET REQUEST
    get:
      summary: Concession by id get request
      tags:
        - "Concessions"
      description: find concession by id
      operationId: findConcessionById
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcessionDto'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'
    #PUT REQUEST
    put:
      summary: update concession
      tags:
        - "Concessions"
      description: update concession
      operationId: updateConcession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConcessionDto'
      responses:
        200:
          description: Concession updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcessionDto'
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'
    #DELETE REQUEST
    delete:
      summary: delete concession
      tags:
        - "Concessions"
      description: delete concession
      operationId: deleteConcession
      responses:
        200:
          description: Concession deleted
        default:
          description: error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Error'

components:

  schemas:
    #Error
    Error:
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
          minimum: 100
          maximum: 600

    #Jwt
    JwtRequest:
      description: credentials
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    JwtResponse:
      description: credentials
      type: object
      properties:
        jwtToken:
          type: string

    #User Schema
    UserDto:
      description: User Dto
      type: object
      properties:
        id:
          type: string
          format: uuid
        userName:
          type: string
        email:
          type: string
        password:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'

    #Field Schema
    FieldDto:
      description: Field Dto
      type: object
      properties:
        id:
          type: string
          format: uuid
        fieldName:
          type: string
        reservesOil:
          type: number
          format: double
        reservesGas:
          type: number
          format: double
        reservesCondensate:
          type: number
          format: double
        hydrocarbons:
          type: array
          items:
            $ref: '#/components/schemas/HCtype'

    #Company Schema
    CompanyDto:
      description: Company Dto
      type: object
      properties:
        id:
          type: string
          format: uuid
        companyName:
          type: string

    #Concession Schema
    ConcessionDto:
      description: Concession Dto
      type: object
      properties:
        id:
          type: string
          format: uuid
        concessionName:
          type: string
        concessionDescription:
          type: string
        owners:
          type: array
          items:
            type: string
        fields:
          type: array
          items:
            type: string

    #Daily_Report Schema
    DailyReportDto:
      description: Daily Production Report Dto
      type: object
      properties:
        id:
          type: string
          format: uuid
        concessionName:
          type: string
        owners:
          type: array
          items:
            type: string
        fieldName:
          type: string
        hydrocarbons:
          type: array
          items:
            $ref: '#/components/schemas/HCtype'
        producedOilBbl:
          type: number
          format: double
        producedGasMMcf:
          type: number
          format: double
        producedCondensateBbl:
          type: number
          format: double

    #Production Entry Schema
    ProductionEntryDto:
      description: Daily Production Entry Dto
      type: object
      properties:
        fieldName:
          type: string
        producedOilBbl:
          type: number
          format: double
        producedGasMMcf:
          type: number
          format: double
        producedCondensateBbl:
          type: number
          format: double

    #Enum
    HCtype:
      description: type of hydrocarbons
      type: string
      enum:
        - OIL
        - GAS
        - CONDENSATE

    Role:
      description: security role
      type: string
      enum:
        - USER
        - ADMIN